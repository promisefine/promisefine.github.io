{"meta":{"title":"Doney","subtitle":"卷野の博客","description":"专科 | 计算机科学与技术 | 网络安全","author":"Doney","url":"https://promisefine.github.io","root":"/"},"pages":[{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2021-07-12T00:45:59.354Z","comments":true,"path":"404.html","permalink":"https://promisefine.github.io/404.html","excerpt":"","text":""},{"title":"","date":"2021-07-12T00:45:59.563Z","updated":"2021-07-12T00:45:59.563Z","comments":true,"path":"google1xxxxxxx0.html","permalink":"https://promisefine.github.io/google1xxxxxxx0.html","excerpt":"","text":"google-site-verification: google110e5e5e14c8dcf0.html"},{"title":"放松一下","date":"2019-08-10T08:41:10.000Z","updated":"2021-07-12T00:45:59.389Z","comments":true,"path":"List/index.html","permalink":"https://promisefine.github.io/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"","date":"2021-07-12T00:45:59.560Z","updated":"2021-07-12T00:45:59.560Z","comments":true,"path":"baidu_verify_xxxxxxx.html","permalink":"https://promisefine.github.io/baidu_verify_xxxxxxx.html","excerpt":"","text":"wvlc3L96QK"},{"title":"about","date":"2019-10-24T16:00:00.000Z","updated":"2021-07-12T00:45:59.558Z","comments":true,"path":"about/index.html","permalink":"https://promisefine.github.io/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2021-07-12T00:45:59.559Z","comments":true,"path":"archives/index.html","permalink":"https://promisefine.github.io/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-24T16:00:00.000Z","updated":"2021-07-12T00:45:59.560Z","comments":true,"path":"categories/index.html","permalink":"https://promisefine.github.io/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2019-10-24T16:00:00.000Z","updated":"2021-07-14T06:09:43.269Z","comments":true,"path":"contact/index.html","permalink":"https://promisefine.github.io/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！"},{"title":"统计","date":"2020-10-31T02:11:28.000Z","updated":"2021-07-12T00:45:59.561Z","comments":true,"path":"census/index.html","permalink":"https://promisefine.github.io/census/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","updated":"2021-07-12T00:45:59.566Z","comments":true,"path":"tags/index.html","permalink":"https://promisefine.github.io/tags/index.html","excerpt":"","text":""},{"title":"相册","date":"2021-07-12T00:45:59.362Z","updated":"2021-07-12T00:45:59.362Z","comments":true,"path":"List/galleries/index.html","permalink":"https://promisefine.github.io/List/galleries/index.html","excerpt":"","text":""},{"title":"资源分享","date":"2019-07-19T08:40:27.000Z","updated":"2021-07-12T00:45:59.564Z","comments":true,"path":"resource/index.html","permalink":"https://promisefine.github.io/resource/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2021-07-12T00:45:59.391Z","comments":true,"path":"List/music/index.html","permalink":"https://promisefine.github.io/List/music/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2021-07-12T00:45:59.390Z","comments":true,"path":"List/movies/index.html","permalink":"https://promisefine.github.io/List/movies/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2021-07-12T00:45:59.392Z","comments":true,"path":"List/tools/index.html","permalink":"https://promisefine.github.io/List/tools/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2021-07-12T00:45:59.372Z","updated":"2021-07-12T00:45:59.372Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"https://promisefine.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2021-07-12T00:45:59.362Z","updated":"2021-07-12T00:45:59.362Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"https://promisefine.github.io/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2021-07-12T00:45:59.362Z","updated":"2021-07-12T00:45:59.362Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"https://promisefine.github.io/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2021-07-12T00:45:59.372Z","updated":"2021-07-12T00:45:59.372Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"https://promisefine.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2021-07-12T00:45:59.372Z","updated":"2021-07-12T00:45:59.372Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"https://promisefine.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2021-07-12T00:45:59.372Z","updated":"2021-07-12T00:45:59.372Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"https://promisefine.github.io/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2021-07-12T00:45:59.379Z","updated":"2021-07-12T00:45:59.379Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"https://promisefine.github.io/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2021-07-12T00:45:59.380Z","updated":"2021-07-12T00:45:59.380Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"https://promisefine.github.io/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2021-07-12T00:45:59.382Z","updated":"2021-07-12T00:45:59.382Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"https://promisefine.github.io/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2021-07-12T00:45:59.384Z","updated":"2021-07-12T00:45:59.384Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"https://promisefine.github.io/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2021-07-12T00:45:59.386Z","updated":"2021-07-12T00:45:59.386Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"https://promisefine.github.io/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2021-07-12T00:45:59.387Z","updated":"2021-07-12T00:45:59.387Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"https://promisefine.github.io/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""}],"posts":[{"title":"debounce","slug":"debounce","date":"2021-07-13T11:24:47.000Z","updated":"2021-07-15T00:12:22.973Z","comments":true,"path":"posts/dbf34790.html","link":"","permalink":"https://promisefine.github.io/posts/dbf34790.html","excerpt":"","text":"代码演示const button = document.querySelector('button') function patMoney() { console.log('已剁') } // 创建一个防抖函数 function debounce(func, delay) { // 防止在定义监听函数的时候就直接执行了函数 所以我们用到高阶函数 let timer // 闭包 因为作用域链的关系 所有独立的执行函数都能访问到这个timer变量 return function () { let context = this let args = arguments clearTimeout(timer) // 设置setTimeout timer = setTimeout(function () { func.apply(context, args) }, delay) } } button.addEventListener('click', debounce(patMoney, 3000))","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://promisefine.github.io/tags/Javascript/"}],"author":"Doney"},{"title":"throttle","slug":"throttle","date":"2021-07-13T11:20:42.000Z","updated":"2021-07-15T00:12:58.026Z","comments":true,"path":"posts/ebdc48ec.html","link":"","permalink":"https://promisefine.github.io/posts/ebdc48ec.html","excerpt":"","text":"代码演示function coloring() { let r = Math.floor(Math.random() * 255) let g = Math.floor(Math.random() * 255) let b = Math.floor(Math.random() * 255) document.body.style.background = `rgb(${r},${g},${b})` } function throttle(func, delay) { let pre = 0 return function () { let now = new Date() let context = this let args = arguments if (now - pre &gt; delay) { func.apply(context, args) pre = now } } } window.addEventListener('resize', throttle(coloring, 2000))","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://promisefine.github.io/tags/Javascript/"}],"author":"Doney"},{"title":"Promise","slug":"Promise","date":"2021-07-13T11:12:13.000Z","updated":"2021-07-15T00:12:39.595Z","comments":true,"path":"posts/23a0e66.html","link":"","permalink":"https://promisefine.github.io/posts/23a0e66.html","excerpt":"","text":"代码演示class myPromise { // 准备状态 static PENDING = 'pending' // 完成状态 static FULFILLED = 'fulfilled' // 失败状态 static REJECTED = 'rejected' constructor(executor) { this.status = myPromise.PENDING this.value = null this.callbacks = [] try { executor(this.resolve.bind(this), this.reject.bind(this)) } catch (error) { this.reject(error) } } // 类方法 // 成功 resolve(value) { // console.log(this) // 改变promise的状态 解决状态 if (this.status = myPromise.PENDING) { this.status = myPromise.FULFILLED this.value = value } // 变为异步任务 setTimeout(() =&gt; { this.callbacks.map(callback =&gt; { callback.onFulfilled(value) }) }); } // 失败 reject(reason) { if (this.status = myPromise.PENDING) { this.status = myPromise.REJECTED this.value = reason } // 变为异步任务 setTimeout(() =&gt; { this.callbacks.map(callback =&gt; { callback.onRejected(reason) }) }); } // then then(onFulfilled, onRejected) { if (typeof onFulfilled != 'function') { onFulfilled = () =&gt; { } } if (typeof onRejected != 'function') { onRejected = () =&gt; { } } // 当状态为准备状态 if (this.status == myPromise.PENDING) { this.callbacks.push({ onFulfilled: value =&gt; { try { onFulfilled(value) } catch (error) { onRejected(error) } }, onRejected: value =&gt; { try { onRejected(value) } catch (error) { onRejected(error) } } }) } // 当状态为完成的时候执行 if (this.status == myPromise.FULFILLED) { // 放到队列。轮询执行 setTimeout(() =&gt; { // 处理错误 try { onFulfilled(this.value) } catch (error) { onRejected(error) } }) } // 当状态为失败的时候执行 if (this.status == myPromise.REJECTED) { // 放到队列。轮询执行 setTimeout(() =&gt; { // 处理错误 try { onRejected(this.value) } catch (error) { onRejected(error) } }) } } }","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://promisefine.github.io/tags/Javascript/"}],"author":"Doney"},{"title":"introduce","slug":"introduce","date":"2017-03-16T02:13:01.000Z","updated":"2021-07-15T00:11:42.699Z","comments":true,"path":"posts/3714eea.html","link":"","permalink":"https://promisefine.github.io/posts/3714eea.html","excerpt":"","text":"","categories":[],"tags":[{"name":"introduce","slug":"introduce","permalink":"https://promisefine.github.io/tags/introduce/"}]}],"categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://promisefine.github.io/tags/Javascript/"},{"name":"introduce","slug":"introduce","permalink":"https://promisefine.github.io/tags/introduce/"}]}